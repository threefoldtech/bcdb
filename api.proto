// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// option java_multiple_files = true;
// option java_package = "io.grpc.examples.bcdb";
// option java_outer_classname = "BCDBProto";

package bcdb;

// Interface exported by the server.
service BCDB {
  // Set stores a document and return a header
  rpc Set(Document) returns (Header) {}

  // Get a document from header
  rpc Get(Header) returns (Document) {}

  // Modify updates a document meta
  rpc Modify(Update) returns (Header) {}

  // List returns a list of coument IDs that matches a query
  rpc List(Query) returns (stream Header) {}

  // Find like list but return full object
  rpc Find(Query) returns (stream Document) {}
}

// Tag is a single entry in an object.
// The tag key must be a string, but the
// value can be either a string, double signed, or unsigned number
// Tags are always indexed, and can be used to find the associated meta
// objects later on.
message Tag {
  // key of the tag
  string key = 1;
  // value of the tag. Only supporting few primitive types
  oneof value {
    string string = 2;
    double double = 3;
    int64 number = 4;
    uint64 unsigned = 5;
  };
}

// Metadata represents a set of tags (also known as Metadata)
message Metadata { repeated Tag tags = 1; }

// Document is a full document
message Document {
  Metadata metadata = 1;
  bytes data = 2;
}

message Update {
  Header header = 1;
  Metadata metadata = 2;
}

// Header holds an information about a document object.
// currently it only holds the ID of the document.
message Header { string id = 1; }

// Blob is binary data associated with a single document.
// TODO: support chuncking for large blobks? how big a blob can be
message Blob { bytes data = 1; }

message Query {}
